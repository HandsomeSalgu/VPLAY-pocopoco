<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pocopoco_vplay.board.model.mapper.BoardMapper">

	<select id="selectCategory">
	    SELECT 
	        CONTENT.VIEWS,
	        CONTENT.CONTENT_NO,
	        CONTENT.CONTENT_TITLE,
	        MENU.MENU_NAME,
	        LIKES.USER_NO AS LIKESUSER,
	        COUNT(L2.CONTENT_NO) AS LIKE_COUNT, 
	        MENU.MENU_NO
	    FROM CONTENT
	    LEFT JOIN BOARD ON CONTENT.CONTENT_NO = BOARD.CONTENT_NO
	    LEFT JOIN CONTENT_CATEGORY ON CONTENT.CONTENT_NO = CONTENT_CATEGORY.CONTENT_NO
	    LEFT JOIN CATEGORY ON CONTENT_CATEGORY.CATEGORY_NO = CATEGORY.CATEGORY_NO
	    LEFT JOIN MENU ON CATEGORY.MENU_NO = MENU.MENU_NO
	    LEFT JOIN LIKES ON CONTENT.CONTENT_NO = LIKES.CONTENT_NO
	    LEFT JOIN LIKES L2 ON L2.CONTENT_NO = CONTENT.CONTENT_NO
	    WHERE BOARD.BOARD_TYPE IS NULL
	      AND LIKES.USER_NO = #{userNo}
	      AND MENU.MENU_NAME IS NOT NULL
	    <if test="menu != 'All'">
	        AND MENU.MENU_NAME = #{menu}
	    </if>
	    GROUP BY 
	        CONTENT.VIEWS, CONTENT.CONTENT_NO, CONTENT.CONTENT_TITLE, MENU.MENU_NAME, LIKES.USER_NO, CONTENT.CREATE_DATE, MENU.MENU_NO
	    <if test="sort == 'newest'">
	        ORDER BY CONTENT.CREATE_DATE
	    </if>
	    <if test="sort == 'mostView'">
	        ORDER BY CONTENT.VIEWS DESC
	    </if>
	</select>

	<select id="selectCategoryMyProjects">
	    SELECT 
	        C.CONTENT_NO,
	        C.CONTENT_TITLE,
	        C.CREATE_DATE,
	        C.MODIFY_DATE,
	        C.CONTENT_STATUS,
	        C.DELETE_STATUS,
	        C.USER_NO,
	        C.VIEWS,
	        C.MD_RECOMMENDATION, 
	        B.BOARD_TYPE, 
	        M.MENU_NAME, 
	        M.MENU_NO,
	        (SELECT COUNT(*) FROM LIKES WHERE LIKES.CONTENT_NO = C.CONTENT_NO) AS LIKE_COUNT, 
	        GROUP_CONCAT(CCC.CATEGORY_NAME ORDER BY CCC.CATEGORY_NAME SEPARATOR ',') AS CATEGORY_NAME
	    FROM CONTENT C
	    LEFT JOIN BOARD B ON C.CONTENT_NO = B.CONTENT_NO
	    LEFT JOIN CONTENT_CATEGORY CC ON C.CONTENT_NO = CC.CONTENT_NO
	    LEFT JOIN CATEGORY CCC ON CC.CATEGORY_NO = CCC.CATEGORY_NO
	    LEFT JOIN MENU M ON CCC.MENU_NO = M.MENU_NO
	    WHERE C.USER_NO = #{userNo} 
	      AND B.BOARD_TYPE IS NULL 
	      AND M.MENU_NAME IS NOT NULL 
	      AND C.CONTENT_STATUS = 'Y'
	    <if test="menu != 'All'">
	        AND M.MENU_NAME = #{menu}
	    </if>
	    GROUP BY 
	        C.CONTENT_NO,
	        C.CONTENT_TITLE,
	        C.CREATE_DATE,
	        C.MODIFY_DATE,
	        C.CONTENT_STATUS,
	        C.DELETE_STATUS,
	        C.USER_NO,
	        C.VIEWS,
	        C.MD_RECOMMENDATION,
	        B.BOARD_TYPE, 
	        M.MENU_NAME, 
	        M.MENU_NO
	    <if test="sort == 'newest'">
	        ORDER BY C.CREATE_DATE
	    </if>
	    <if test="sort == 'mostView'">
	        ORDER BY C.VIEWS DESC
	    </if>
	</select>

	<update id="throwBoardTrash">
	    <if test="trashYN == 0">
	        UPDATE CONTENT SET CONTENT_STATUS = 'N' WHERE CONTENT_NO = #{contentNo}
	    </if>
	    <if test="trashYN == 1">
	        UPDATE CONTENT SET CONTENT_STATUS = 'Y' WHERE CONTENT_NO = #{contentNo}
	    </if>
	</update>

	<select id="selectMyTrash">
	    SELECT 
	        C.CONTENT_NO,
	        C.CONTENT_TITLE,
	        C.CREATE_DATE,
	        C.MODIFY_DATE,
	        C.CONTENT_STATUS,
	        C.DELETE_STATUS,
	        C.USER_NO,
	        C.VIEWS,
	        C.MD_RECOMMENDATION,
	        (SELECT COUNT(*) FROM LIKES WHERE LIKES.CONTENT_NO = C.CONTENT_NO) AS LIKE_COUNT, 
	        B.BOARD_TYPE,
	        M.MENU_NAME, 
	        GROUP_CONCAT(CCC.CATEGORY_NAME ORDER BY CCC.CATEGORY_NAME SEPARATOR ',') AS CATEGORY_NAME
	    FROM CONTENT C
	    LEFT JOIN BOARD B ON C.CONTENT_NO = B.CONTENT_NO
	    LEFT JOIN CONTENT_CATEGORY CC ON C.CONTENT_NO = CC.CONTENT_NO
	    LEFT JOIN CATEGORY CCC ON CC.CATEGORY_NO = CCC.CATEGORY_NO
	    LEFT JOIN MENU M ON CCC.MENU_NO = M.MENU_NO
	    WHERE C.USER_NO = #{userNo} 
	      AND B.BOARD_TYPE IS NULL 
	      AND M.MENU_NAME IS NOT NULL 
	      AND C.CONTENT_STATUS = 'N'
	    GROUP BY 
	        C.CONTENT_NO,
	        C.CONTENT_TITLE,
	        C.CREATE_DATE,
	        C.MODIFY_DATE,
	        C.CONTENT_STATUS,
	        C.DELETE_STATUS,
	        C.USER_NO,
	        C.VIEWS,
	        C.MD_RECOMMENDATION,
	        B.BOARD_TYPE, 
	        M.MENU_NAME
	</select>

	<select id="selectCategoryMyTrash">
	    SELECT 
	        C.*,
	        (SELECT COUNT(*) FROM LIKES WHERE LIKES.CONTENT_NO = C.CONTENT_NO) AS LIKE_COUNT
	    FROM CONTENT C
	    LEFT JOIN BOARD B ON C.CONTENT_NO = B.CONTENT_NO
	    LEFT JOIN CONTENT_CATEGORY CC ON C.CONTENT_NO = CC.CONTENT_NO
	    LEFT JOIN CATEGORY CCC ON CC.CATEGORY_NO = CCC.CATEGORY_NO
	    LEFT JOIN MENU M ON CCC.MENU_NO = M.MENU_NO
	    WHERE C.USER_NO = #{userNo} 
	      AND B.BOARD_TYPE IS NULL 
	      AND M.MENU_NAME IS NOT NULL 
	      AND C.CONTENT_STATUS = 'N'
	    <if test="menu != 'All'">
	        AND M.MENU_NAME = #{menu}
	    </if>
	    <if test="sort == 'newest'">
	        ORDER BY C.CREATE_DATE
	    </if>
	    <if test="sort == 'mostView'">
	        ORDER BY C.VIEWS DESC
	    </if>
	</select>

	<select id="allTemplateList" parameterType="string">
	    SELECT *
	    FROM (
	        SELECT 
	            GROUP_CONCAT(CG.CATEGORY_NAME ORDER BY CG.CATEGORY_NAME SEPARATOR ',') AS CATEGORY_NAME, 
	            C.CONTENT_NO, 
	            C.CONTENT_TITLE, 
	            U.USER_NICKNAME,
	            M.MENU_NO, 
	            M.MENU_NAME,
	            (SELECT COUNT(*) FROM LIKES LK WHERE LK.CONTENT_NO = C.CONTENT_NO) AS LIKE_COUNT, 
	            (SELECT COUNT(*) FROM DOWNLOADS D WHERE D.CONTENT_NO = C.CONTENT_NO) AS DOWNLOAD_COUNT
	        FROM CONTENT C
	        LEFT JOIN USERS U ON C.USER_NO = U.USER_NO
	        LEFT JOIN BOARD B ON C.CONTENT_NO = B.CONTENT_NO
	        LEFT JOIN CONTENT_CATEGORY CC ON C.CONTENT_NO = CC.CONTENT_NO
	        LEFT JOIN CATEGORY CG ON CC.CATEGORY_NO = CG.CATEGORY_NO
	        LEFT JOIN MENU M ON CG.MENU_NO = M.MENU_NO
	        LEFT JOIN LIKES LK2 ON C.CONTENT_NO = LK2.CONTENT_NO
	        WHERE B.BOARD_TYPE IS NULL 
	          AND M.MENU_NAME = #{menuName} 
	          AND C.CONTENT_STATUS = 'Y'
	        <if test="categoryArray != null">
	            AND CG.CATEGORY_NAME IN
	            <foreach item="category" collection="categoryArray" open="(" separator="," close=")">
	                #{category}
	            </foreach>
	        </if>
	        <if test="search != null">
	            AND C.CONTENT_TITLE LIKE CONCAT('%', #{search}, '%')
	        </if>
	        GROUP BY C.CONTENT_NO, C.CONTENT_TITLE, U.USER_NICKNAME, M.MENU_NO, M.MENU_NAME
	        ORDER BY C.CONTENT_NO DESC
	        <choose>
	            <when test="menuNameNum == 'video Templates'">LIMIT 3</when>
	            <when test="menuNameNum == 'Music'">LIMIT 6</when>
	            <when test="menuNameNum == 'Sound Effects'">LIMIT 6</when>
	            <when test="menuNameNum == 'Graphic Templates'">LIMIT 3</when>
	            <when test="menuNameNum == 'Stock Video'">LIMIT 3</when>
	            <when test="menuNameNum == 'Photos'">LIMIT 3</when>
	            <when test="menuNameNum == 'Fonts'">LIMIT 6</when>
	            <when test="recentList != null">LIMIT 6</when>
	        </choose>
	    ) AS T
	</select>

	<select id="menuLikeTo">
	    SELECT COUNT(*)
	    FROM LIKES
	    WHERE USER_NO = #{userNo} 
	      AND CONTENT_NO = #{contentNo}
	    ORDER BY CONTENT_NO DESC
	</select>

	<select id="selectMyInquiry">
	    SELECT *
	    FROM CONTENT
	    JOIN BOARD USING(CONTENT_NO)
	    WHERE BOARD_TYPE = 1
	      AND USER_NO = #{userNo}
	      AND CONTENT_STATUS = 'Y'
	    ORDER BY CREATE_DATE DESC
	</select>

	<select id="selectMyCommission">
	    SELECT *
	    FROM CONTENT
	    JOIN BOARD USING(CONTENT_NO)
	    WHERE BOARD_TYPE = 2
	      AND USER_NO = #{userNo}
	      AND CONTENT_STATUS = 'Y'
	    ORDER BY CREATE_DATE DESC
	</select>

	<insert id="insertInquiry" parameterType="Content" useGeneratedKeys="true" keyProperty="contentNo">
	    INSERT INTO CONTENT (
	        USER_NO,
	        CONTENT_TITLE,
	        CONTENT_DETAIL,
	        CREATE_DATE,
	        MODIFY_DATE,
	        CONTENT_STATUS,
	        VIEWS
	    ) VALUES (
	        #{userNo},
	        #{contentTitle},
	        #{contentDetail},
	        CURRENT_TIMESTAMP,
	        CURRENT_TIMESTAMP,
	        'Y',
	        0
	    )
	</insert>

	<insert id="insertBoard">
	    INSERT INTO BOARD (
	        CONTENT_NO,
	        BOARD_TYPE,
	        MENU_NO
	    ) VALUES (
	        #{contentNo},
	        1,
	        #{menuNo}
	    )
	</insert>

	<update id="updateInquiry" parameterType="Content">
	    UPDATE CONTENT
	    SET
	        CONTENT_TITLE = #{contentTitle},
	        CONTENT_DETAIL = #{contentDetail},
	        MODIFY_DATE = CURRENT_TIMESTAMP
	    WHERE
	        CONTENT_NO = #{contentNo}
	</update>

	<update id="updateBoard">
	    UPDATE BOARD
	    SET
	        MENU_NO = #{menuNo}
	    WHERE
	        CONTENT_NO = #{contentNo}
	</update>

	<select id="selectInquiry" resultType="Content">
	    SELECT
	        C.CONTENT_NO,
	        C.USER_NO,
	        C.CONTENT_TITLE,
	        C.CONTENT_DETAIL,
	        C.CREATE_DATE,
	        C.MODIFY_DATE,
	        C.CONTENT_STATUS,
	        C.VIEWS,
	        B.MENU_NO
	    FROM CONTENT C
	    JOIN BOARD B ON C.CONTENT_NO = B.CONTENT_NO
	    WHERE C.CONTENT_NO = #{contentNo}
	</select>

	<select id="selectReply">
	    SELECT REPLY_DETAIL
	    FROM REPLY
	    WHERE CONTENT_NO = #{contentNo}
	</select>

	<select id="countReply">
	    SELECT COUNT(*)
	    FROM REPLY
	    WHERE CONTENT_NO = #{contentNo}
	</select>

	<select id="allCategory">
	    SELECT *
	    FROM CATEGORY
	    WHERE MENU_NO = #{menuNo}
	</select>

	<!-- 일단은 기본 쿼리랑 동일 -->
	<select id="allPopularCate">
	    SELECT *
	    FROM CATEGORY
	    WHERE MENU_NO = #{menuNo}
	</select>

	<select id="getrequestPostCount">
	    SELECT COUNT(*)
	    FROM CONTENT
	    JOIN BOARD USING(CONTENT_NO)
	    WHERE BOARD_TYPE = 2 
	      AND CONTENT_STATUS = 'Y'
	    <if test="menuNo != null">
	        AND MENU_NO = #{menuNo}
	    </if>
	    <if test="search != null and search != ''">
	        AND (
	            CONTENT_TITLE LIKE CONCAT('%', #{search}, '%') 
	            OR CONTENT_DETAIL LIKE CONCAT('%', #{search}, '%')
	        )
	    </if>
	</select>

	<select id="selectAllRequestPost">
	    SELECT *
	    FROM CONTENT
	    JOIN BOARD USING(CONTENT_NO)
	    JOIN MENU USING(MENU_NO)
	    WHERE BOARD_TYPE = 2 
	      AND CONTENT_STATUS = 'Y'
	    <if test="menuNo != null">
	        AND MENU_NO = #{menuNo}
	    </if>
	    <if test="search != null and search != ''">
	        AND (
	            CONTENT_TITLE LIKE CONCAT('%', #{search}, '%') 
	            OR CONTENT_DETAIL LIKE CONCAT('%', #{search}, '%')
	        )
	    </if>
	    ORDER BY CONTENT_NO DESC
	</select>

	<select id="selectUser">
	    SELECT USER_NICKNAME
	    FROM USERS
	    WHERE USER_NO = #{userNo}
	</select>

	<insert id="insertRequest" parameterType="Content" useGeneratedKeys="true" keyProperty="contentNo">
	    INSERT INTO CONTENT (
	        CONTENT_TITLE,
	        CONTENT_DETAIL,
	        CREATE_DATE,
	        MODIFY_DATE,
	        CONTENT_STATUS,
	        DELETE_STATUS,
	        USER_NO,
	        VIEWS
	    ) VALUES (
	        #{contentTitle},
	        #{contentDetail},
	        CURRENT_TIMESTAMP,
	        CURRENT_TIMESTAMP,
	        DEFAULT,
	        DEFAULT,
	        #{userNo},
	        DEFAULT
	    )
	</insert>

	<insert id="insertRequestBoard">
	    INSERT INTO BOARD (CONTENT_NO, BOARD_TYPE, MENU_NO)
	    VALUES (#{contentNo}, 2, #{menuNo})
	</insert>

	<select id="selectRequest">
	    SELECT *
	    FROM CONTENT
	    LEFT JOIN USERS USING(USER_NO)
	    LEFT JOIN BOARD USING(CONTENT_NO)
	    LEFT JOIN MENU USING(MENU_NO)
	    LEFT JOIN CONTENT_CATEGORY USING(CONTENT_NO)
	    LEFT JOIN CATEGORY USING(CATEGORY_NO)
	    WHERE CONTENT_STATUS = 'Y' 
	      AND CONTENT_NO = #{bId}
	</select>

	<update id="updateCount">
	    UPDATE CONTENT
	    SET VIEWS = VIEWS + 1
	    WHERE CONTENT_NO = #{bId}
	</update>

	<select id="allMenuDetail" parameterType="int">
	    SELECT 
	        C.CONTENT_NO,
	        C.CONTENT_TITLE,
	        C.CONTENT_DETAIL,
	        C.CREATE_DATE,
	        U.USER_PROFILE,
	        C.MODIFY_DATE,
	        C.CONTENT_STATUS,
	        U.USER_NO,
	        U.USER_ID,
	        U.USER_NICKNAME,
	        U.USER_EMAIL,
	        U.USER_PROFILE,
	        M.MENU_NAME,
	        M.MENU_NO,
	        (
	            SELECT 
	                GROUP_CONCAT(CATEGORY_NAME ORDER BY CATEGORY_NAME SEPARATOR ',')
	            FROM CONTENT_CATEGORY CC
	            JOIN CATEGORY CG ON CC.CATEGORY_NO = CG.CATEGORY_NO
	            WHERE CC.CONTENT_NO = C.CONTENT_NO
	        ) AS CATEGORY_NAME
	    FROM CONTENT C
	    JOIN USERS U ON C.USER_NO = U.USER_NO
	    JOIN MENU M ON (
	        M.MENU_NO = (
	            SELECT MIN(CG.MENU_NO)
	            FROM CONTENT_CATEGORY CC
	            JOIN CATEGORY CG ON CC.CATEGORY_NO = CG.CATEGORY_NO
	            WHERE CC.CONTENT_NO = C.CONTENT_NO
	        )
	    )
	    WHERE C.CONTENT_NO = #{contentNo}
	</select>

	<select id="contentFile">
	    SELECT *
	    FROM FILES
	    WHERE REF_CONTENT_NO = #{contentNo}    
	</select>

	<select id="selectReplyList">
	    SELECT
	        R.REPLY_NO,
	        R.REPLY_DETAIL,
	        R.MODIFY_DATE,
	        U.USER_NICKNAME,
	        U.USER_PROFILE AS USERPROFILE
	    FROM REPLY R
	    JOIN USERS U ON R.USER_NO = U.USER_NO
	    WHERE R.CONTENT_NO = #{bId}
	      AND R.REPLY_STATUS = 'Y'
	    ORDER BY R.REPLY_NO DESC
	</select>

	<insert id="allTempLike">
	    INSERT INTO LIKES
	    VALUES (#{userNo}, #{contentNo})
	</insert>

	<delete id="unAllTempLike">
	    DELETE FROM LIKES
	    WHERE USER_NO = #{userNo} 
	      AND CONTENT_NO = #{contentNo}
	</delete>

	<update id="updateRequest">
	    UPDATE CONTENT
	    SET CONTENT_TITLE = #{contentTitle},
	        MODIFY_DATE = CURRENT_TIMESTAMP,
	        CONTENT_DETAIL = #{contentDetail}
	    WHERE CONTENT_NO = #{contentNo}
	</update>

	<update id="updateRequestMenu">
	    UPDATE BOARD
	    SET MENU_NO = #{menuNo}
	    WHERE CONTENT_NO = #{contentNo}
	</update>

	<update id="deleteBoard">
	    UPDATE CONTENT
	    SET CONTENT_STATUS = 'N'
	    WHERE CONTENT_NO = #{bId}
	</update>

	<select id="selectContentTop">
	    SELECT
	        C.CONTENT_NO,
	        C.CONTENT_TITLE,
	        C.CREATE_DATE,
	        C.MODIFY_DATE,
	        C.USER_NO,
	        C.VIEWS,
	        U.USER_NICKNAME, 
	        M.MENU_NO, 
	        M.MENU_NAME,
	        (SELECT COUNT(*) FROM LIKES L WHERE L.CONTENT_NO = C.CONTENT_NO) AS LIKE_COUNT, 
	        (SELECT COUNT(*) FROM DOWNLOADS D WHERE D.CONTENT_NO = C.CONTENT_NO) AS DOWNLOAD_COUNT
	    FROM CONTENT C
	    JOIN USERS U ON C.USER_NO = U.USER_NO
	    LEFT JOIN BOARD B ON C.CONTENT_NO = B.CONTENT_NO
	    LEFT JOIN CONTENT_CATEGORY CC ON C.CONTENT_NO = CC.CONTENT_NO
	    LEFT JOIN CATEGORY CG ON CC.CATEGORY_NO = CG.CATEGORY_NO
	    LEFT JOIN MENU M ON CG.MENU_NO = M.MENU_NO
	    LEFT JOIN LIKES L ON C.CONTENT_NO = L.CONTENT_NO
	    WHERE B.BOARD_TYPE IS NULL 
	      AND M.MENU_NAME IS NOT NULL 
	      AND C.CONTENT_STATUS = 'Y'
	    GROUP BY 
	        C.CONTENT_NO, 
	        C.CONTENT_TITLE, 
	        C.CREATE_DATE,
	        C.MODIFY_DATE, 
	        C.USER_NO, 
	        C.VIEWS, 
	        U.USER_NICKNAME, 
	        U.USER_NICKNAME, 
	        M.MENU_NO, 
	        M.MENU_NAME
	    ORDER BY C.VIEWS DESC
	    LIMIT 12
	</select>

	<select id="selectOrderByViews">
	    SELECT * 
	    FROM CONTENT 
	    ORDER BY VIEWS DESC
	    LIMIT 12
	</select>

	<insert id="insertReply">
	    INSERT INTO REPLY(REPLY_DETAIL, CREATE_DATE, MODIFY_DATE, REPLY_STATUS, CONTENT_NO, USER_NO)
	    VALUES (#{replyDetail}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'Y', #{contentNo}, #{userNo})
	</insert>

	<update id="updateReply">
	    UPDATE REPLY
	    SET REPLY_DETAIL = #{replyDetail},
	        MODIFY_DATE = CURRENT_TIMESTAMP
	    WHERE REPLY_NO = #{replyNo}
	      AND USER_NO = #{userNo}
	</update>

	<delete id="deleteReply">
	    DELETE FROM REPLY
	    WHERE REPLY_NO = #{replyNo}
	</delete>

	<select id="selectRequestList">
	    SELECT * 
	    FROM CONTENT
	    JOIN BOARD USING(CONTENT_NO)
	    JOIN MENU USING(MENU_NO)
	    JOIN USERS USING(USER_NO)
	    WHERE MENU_NO = #{menuNo} 
	      AND CONTENT_STATUS = 'Y'
	</select>

	<select id="searchRequest">
	    SELECT *
	    FROM CONTENT
	    JOIN USERS USING(USER_NO)
	    JOIN BOARD USING(CONTENT_NO)
	    JOIN MENU USING(MENU_NO)
	    <if test="searchValue != null and searchValue.trim() != ''">
	        WHERE CONTENT_TITLE LIKE CONCAT(CONCAT('%', #{searchValue}), '%') 
	          AND BOARD_TYPE = 2 
	          AND CONTENT_STATUS = 'Y'
	    </if>
	</select>

	<select id="menuCategoryList" resultType="map">
	    SELECT CATEGORY_NAME, CATEGORY_NO
	    FROM CATEGORY
	    WHERE MENU_NO = #{menuNo}
	</select>
	
	<!-- 컨텐츠 글 등록 -->
	<insert id="insertContent" useGeneratedKeys="true" keyProperty="contentNo">
	    INSERT INTO CONTENT
	        (CONTENT_TITLE, CONTENT_DETAIL, CREATE_DATE, MODIFY_DATE, CONTENT_STATUS, DELETE_STATUS, USER_NO, VIEWS, MD_RECOMMENDATION)
	    VALUES
	        (#{contentTitle}, #{contentDetail}, DEFAULT, DEFAULT, DEFAULT, DEFAULT, #{userNo}, DEFAULT, DEFAULT)
	</insert>

	<!-- 컨텐츠 글 카테고리 등록 -->
	<insert id="insertContentCategory">
	    INSERT INTO CONTENT_CATEGORY (CONTENT_NO, CATEGORY_NO)
	    VALUES
	    <foreach collection="categoryNo" item="no" separator=",">
	        (#{contentNo}, #{no})
	    </foreach>
	</insert>
	
	<insert id="insertThumbnailFile">
	    INSERT INTO FILES(REF_CONTENT_NO, FILE_LOCATION, FILE_STATUS, FILE_LEVEL, ORIGINAL_FILE_NAME)
	    VALUES (#{contentNo}, #{tFileUrl}, DEFAULT, 1, #{tFileOriginalName})
	</insert>

	<insert id="insertContentFile">
	    INSERT INTO FILES(REF_CONTENT_NO, FILE_LOCATION, FILE_STATUS, FILE_LEVEL, ORIGINAL_FILE_NAME)
	    VALUES (#{contentNo}, #{cFileUrl}, DEFAULT, 2, #{cFileOriginalName})
	</insert>

	<update id="updateRecommendation">
	    UPDATE CONTENT
	    SET MD_RECOMMENDATION = #{column}
	    WHERE CONTENT_NO = #{contentNo}
	</update>

	<select id="getMdRecommendationCount">
	    SELECT COUNT(*)
	    FROM CONTENT
	    WHERE MD_RECOMMENDATION = 'Y'
	</select>

	<select id="selectMdList">
	    SELECT *
	    FROM (
	        SELECT 
	            GROUP_CONCAT(CG.CATEGORY_NAME ORDER BY CG.CATEGORY_NAME SEPARATOR ',') AS CATEGORY_NAME,
	            C.CONTENT_NO, 
	            C.CONTENT_TITLE, 
	            U.USER_NICKNAME,
	            M.MENU_NO, 
	            (SELECT COUNT(*) FROM LIKES LK WHERE LK.CONTENT_NO = C.CONTENT_NO) AS LIKE_COUNT, 
	            (SELECT COUNT(*) FROM DOWNLOADS D WHERE D.CONTENT_NO = C.CONTENT_NO) AS DOWNLOAD_COUNT
	        FROM CONTENT C
	        LEFT JOIN USERS U ON C.USER_NO = U.USER_NO
	        LEFT JOIN BOARD B ON C.CONTENT_NO = B.CONTENT_NO
	        LEFT JOIN CONTENT_CATEGORY CC ON C.CONTENT_NO = CC.CONTENT_NO
	        LEFT JOIN CATEGORY CG ON CC.CATEGORY_NO = CG.CATEGORY_NO
	        LEFT JOIN MENU M ON CG.MENU_NO = M.MENU_NO
	        LEFT JOIN LIKES LK2 ON C.CONTENT_NO = LK2.CONTENT_NO
	        WHERE C.MD_RECOMMENDATION = 'Y'
	        GROUP BY C.CONTENT_NO, C.CONTENT_TITLE, U.USER_NICKNAME, M.MENU_NO
	    ) AS T
	</select>
	
	<select id="checkDownload">
	    SELECT COUNT(*)
	    FROM DOWNLOADS
	    WHERE USER_NO = #{userNo} 
	      AND CONTENT_NO = #{contentNo}
	</select>
	
	<insert id="downloadRecord">
	    INSERT INTO DOWNLOADS(USER_NO, CONTENT_NO)
	    VALUES (#{userNo}, #{contentNo})
	</insert>
	
	<update id="updateContent">
	    UPDATE CONTENT
	    SET CONTENT_TITLE = #{contentTitle}, 
	        CONTENT_DETAIL = #{contentDetail}, 
	        MODIFY_DATE = CURRENT_TIMESTAMP
	    WHERE CONTENT_NO = #{contentNo}
	</update>
	
	<select id="selectFiles">
	    SELECT *
	    FROM FILES
	    WHERE REF_CONTENT_NO = #{contentNo}
	</select>
	
	<update id="updateTFile">
	    UPDATE FILES
	    SET FILE_LOCATION = #{newTFileURL}, 
	        ORIGINAL_FILE_NAME = #{tFileOriginalName}
	    WHERE REF_CONTENT_NO = #{contentNo} 
	      AND FILE_LEVEL = 1
	</update>
	
	<update id="updateCFile">
	    UPDATE FILES
	    SET FILE_LOCATION = #{newCFileURL}, 
	        ORIGINAL_FILE_NAME = #{cFileOriginalName}
	    WHERE REF_CONTENT_NO = #{contentNo} 
	      AND FILE_LEVEL = 2
	</update>
	
	<delete id="deleteContentCategory">
	    DELETE FROM CONTENT_CATEGORY
	    WHERE CONTENT_NO = #{contentNo}
	</delete>
	
	<select id="selectDownloadsCategorySort">
	    SELECT 
	        C.CONTENT_NO,
	        C.CONTENT_TITLE,
	        C.CREATE_DATE,
	        C.MODIFY_DATE,
	        C.CONTENT_STATUS,
	        C.DELETE_STATUS,
	        C.USER_NO,
	        C.VIEWS,
	        C.MD_RECOMMENDATION,
	        (SELECT COUNT(*) FROM LIKES L WHERE L.CONTENT_NO = C.CONTENT_NO) AS LIKE_COUNT,
	        B.BOARD_TYPE,
	        M.MENU_NAME, 
	        M.MENU_NO,
	        (
	            SELECT 
	                GROUP_CONCAT(CG.CATEGORY_NAME ORDER BY CG.CATEGORY_NAME SEPARATOR ',')
	            FROM CONTENT_CATEGORY CC
	            JOIN CATEGORY CG ON CC.CATEGORY_NO = CG.CATEGORY_NO
	            WHERE CC.CONTENT_NO = C.CONTENT_NO
	        ) AS CATEGORY_NAME
	    FROM CONTENT C
	    LEFT JOIN BOARD B ON C.CONTENT_NO = B.CONTENT_NO
	    LEFT JOIN USERS U ON C.USER_NO = U.USER_NO
	    LEFT JOIN DOWNLOADS D ON C.CONTENT_NO = D.CONTENT_NO
	    LEFT JOIN MENU M ON (
	        SELECT CG.MENU_NO
	        FROM CONTENT_CATEGORY CC
	        JOIN CATEGORY CG ON CC.CATEGORY_NO = CG.CATEGORY_NO
	        WHERE CC.CONTENT_NO = C.CONTENT_NO
	        LIMIT 1
	    ) = M.MENU_NO
	    WHERE D.USER_NO = #{userNo}
	      AND B.BOARD_TYPE IS NULL
	      AND M.MENU_NAME IS NOT NULL
	      AND C.CONTENT_STATUS = 'Y'
	    <if test="menu != 'All'">
	        AND M.MENU_NAME = #{menu}
	    </if>
	    <if test="sort == 'newest'">
	        ORDER BY C.CREATE_DATE
	    </if>
	    <if test="sort == 'mostView'">
	        ORDER BY C.VIEWS DESC
	    </if>
	</select>

	
</mapper>